/**
 * @file        RASAeroImport.cpp
 * @authors     Ayberk Yaraneri
 *
 * @brief      A utility class used to parse aerodynamic coefficients and
 * parameters generated by the RASAero software. The class stores the aero
 * parameters into a lookup table and makes them readily available through
 * getter functions. These getters interpolate the data as necessary.
 *
 */

#include "RASAeroImport.h"

#include <rapidcsv.h>

#include <cmath>
#include <string>
#include <iostream>
#include <set>

RASAeroImport::RASAeroImport(std::string file_path) {

    rapidcsv::Document csv(file_path);

    auto mach = csv.GetColumn<double>("Mach Number");
    auto alpha = csv.GetColumn<double>("Alpha (deg)");
    auto protuberance = csv.GetColumn<double>("Protuberance (%)");
    auto cd_poweroff = csv.GetColumn<double>("CD Power-Off");
    auto cd_poweron = csv.GetColumn<double>("CD Power-On");
    auto ca_poweroff = csv.GetColumn<double>("CA Power-Off");
    auto ca_poweron = csv.GetColumn<double>("CA Power-On");
    auto cn = csv.GetColumn<double>("CN Total");
    auto cp = csv.GetColumn<double>("CP Total");
    
    int n_data = mach.size();

    /*
    std::cout << "Number of Mach points = " << mach.size() << std::endl;
    std::cout << "Number of Alpha points = " << alpha.size() << std::endl;
    std::cout << "Number of protub points = " << protuberance.size() << std::endl;
    std::cout << "Number of cd points = " << cd.size() << std::endl;
    */

    aero_table_.resize(n_data, 9);

    for (int i = 0; i < n_data; i++) {
       aero_table_(i, 0) = mach[i];
       aero_table_(i, 1) = alpha[i];
       aero_table_(i, 2) = protuberance[i];
       aero_table_(i, 3) = cd_poweroff[i];
       aero_table_(i, 4) = cd_poweron[i];
       aero_table_(i, 5) = ca_poweroff[i];
       aero_table_(i, 6) = ca_poweron[i];
       aero_table_(i, 7) = cn[i];
       aero_table_(i, 8) = cp[i];
    }

    std::cout << aero_table_ << std::endl;

    set_mach_number_params();
    set_alpha_params();
    set_protuberance_params();
}

void RASAeroImport::set_mach_number_params() {
    auto column = aero_table_.col(0);
    auto vec = std::vector<double> (column.begin(), column.end());
    sort(vec.begin(), vec.end());
    vec.erase(unique(vec.begin(),vec.end()), vec.end());
    mach_number_instances_ = vec.size();
    mach_number_fidelity_ = fabs(vec[0] - vec[1]);
    std::cout << mach_number_instances_ << std::endl;
    std::cout << mach_number_fidelity_ << std::endl;
}

void RASAeroImport::set_alpha_params() {
    auto column = aero_table_.col(1);
    auto vec = std::vector<double> (column.begin(), column.end());
    sort(vec.begin(), vec.end());
    vec.erase(unique(vec.begin(),vec.end()), vec.end());
    alpha_instances_ = vec.size();
    alpha_fidelity_ = fabs(vec[0] - vec[1]);
    std::cout << alpha_instances_ << std::endl;
    std::cout << alpha_fidelity_ << std::endl;
}

void RASAeroImport::set_protuberance_params() {
    auto column = aero_table_.col(2);
    auto vec = std::vector<double> (column.begin(), column.end());
    sort(vec.begin(), vec.end());
    vec.erase(unique(vec.begin(),vec.end()), vec.end());
    protuberance_instances_ = vec.size();
    protuberance_fidelity_ = fabs(vec[0] - vec[1]);
    std::cout << protuberance_instances_ << std::endl;
    std::cout << protuberance_fidelity_ << std::endl;
}
